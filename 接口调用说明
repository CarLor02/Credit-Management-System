chatflow应用 API 接口文档
1. 基础信息

基础 URL

http://115.190.121.59/v1
API-Key app-c8cKydhESsFxtG7QZvZkR5YU

鉴权方式
在 HTTP header 中通过 Authorization: Bearer {API_KEY} 传入你的 API-Key。


2. 接口说明
2.1 发送对话消息

POST /chat-messages
用于发送用户对话消息，支持新增上下文参数继续多轮对话，适合聊天、客服类型应用。

请求参数
参数名	类型	必填	描述
query	string	是	用户的提问或消息内容
inputs	object	否	自定义参数（如 company, knowledge_name）。若包含文件类型变量，请参照 files 说明，默认 {}
response_mode	string	否	响应模式：streaming（推荐，实时流输出）或 blocking（阻塞等待完整回复）
user	string	是	用户标识，用于会话区分，需保证唯一
conversation_id	string	否	用于会话续接，上次接口返回可作为本字段传入
files	array<object>	否	用于传入文件（需模型支持视觉能力），详见说明
auto_generate_name	boolean	否	是否自动生成对话标题，默认为 true
trace_id	string	否	分布式追踪 ID，可从 Header（X-Trace-Id）、Query、或 Request Body 中传入；优先级依次递减
files 字段说明

如果你需要传送文件，例如用于上下文理解，files 数组里的对象需包含下列字段：

type（string）：文件类型，例如 document, image, audio, video, custom；

transfer_method（string）：remote_url（传 URL）或 local_file（上传文件）；

url（string）：文件所处 URL（当 transfer_method = remote_url）；

upload_file_id（string）：上传后的文件 ID（当 transfer_method = local_file）。

请求示例 - blocking 模式
curl -X POST http://115.190.121.59/v1/chat-messages \
  --header 'Authorization: Bearer {API_KEY}' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "query": "生成报告", #可以随便写 ，目前没有使用
    "inputs": {
      "company": "西安市新希望医疗器械有限公司(1)",
      "knowledge_name": "西安市新希望医疗器械有限公司(1)"
    },
    "response_mode": "blocking",
    "user": "user-123",
    "conversation_id": ""
  }'

请求示例 - streaming 模式（推荐）
curl -N -X POST http://115.190.121.59/v1/chat-messages \
  --header 'Authorization: Bearer {API_KEY}' \
  --header 'Content-Type: application/json' \
  --data-raw '{
    "query": "生成报告",
    "inputs": {
      "company": "西安市新希望医疗器械有限公司(1)",
      "knowledge_name": "西安市新希望医疗器械有限公司(1)"
    },
    "response_mode": "streaming",
    "user": "user-123",
    "conversation_id": ""
  }'


加入 -N 参数，使 curl 保持连接以接收流式输出。

3. 返回结果
阻塞模式（blocking）

返回完整 JSON 格式的 ChatCompletionResponse 对象：

{
  "event": "message",
  "task_id": "...",
  "id": "...",
  "message_id": "...",
  "conversation_id": "...",
  "mode": "chat",
  "answer": "...",
  "metadata": {
    "usage": { /* token & cost 信息 */ },
    "retriever_resources": [ /* 引用内容信息 */ ]
  },
  "created_at": 1705407629
}

流式模式（streaming）

通过 SSE（Server-Sent Events）返回多个数据块：

data: {"event":"workflow_started", ...}

data: {"event":"message", "answer":"Hello"}

data: {"event":"message", "answer":" world"}

data: {"event":"message_end", "metadata":{ ... }}


常见事件类型包括：

message（文本块）

message_file（生成文件，如图片）

message_end（响应结束）

tts_message / tts_message_end（音频流输出）

workflow_started / node_started / node_finished / workflow_finished（工作流状态）

error（流式异常）

ping（心跳保持连接）

4. 错误响应
状态码	错误码	描述
404	对话不存在	conversation_id 未找到
400	invalid_param	参数错误
400	app_unavailable	应用不可用
400	provider_not_initialize	后端模型未初始化
400	provider_quota_exceeded	模型调用额度已用尽
400	model_currently_not_support	当前模型无法使用
400	completion_request_error	文本生成调用失败
500	服务内部错误	服务端异常
5. Python 调用示例
简单阻塞模式调用（使用 requests）:
import requests

API_URL = "http://115.190.121.59/v1/chat-messages"
API_KEY = "YOUR_API_KEY"

def send_message(query, user, conversation_id="", inputs=None, mode="blocking"):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "query": query,
        "response_mode": mode,
        "user": user,
        "conversation_id": conversation_id,
        "inputs": inputs or {}
    }
    resp = requests.post(API_URL, headers=headers, json=payload)
    resp.raise_for_status()
    return resp.json()

# 使用示例
resp = send_message(
    query="生成报告",
    user="user-123",
    conversation_id="",
    inputs={"company": "西安市新希望医疗器械有限公司(1)", "knowledge_name": "西安市新希望医疗器械有限公司(1)"},
    mode="blocking"
)
print("AI Answer:", resp.get("answer"))
print("Conversation ID:", resp.get("conversation_id"))

流式模式调用示例（支持流式实时打印响应）:
import requests

def stream_message(query, user, conversation_id="", inputs=None):
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "query": query,
        "response_mode": "streaming",
        "user": user,
        "conversation_id": conversation_id,
        "inputs": inputs or {}
    }
    with requests.post(API_URL, headers=headers, json=payload, stream=True) as resp:
        resp.raise_for_status()
        for line in resp.iter_lines(decode_unicode=True):
            if not line:
                continue
            if line.startswith("data:"):
                # 获取 JSON 并打印
                chunk = line[len("data:"):].strip()
                print("STREAM CHUNK:", chunk)

# 使用示例
stream_message(
    query="生成报告",
    user="user-456",
    conversation_id="",
    inputs={"company": "西安市新希望医疗器械有限公司(1)", "knowledge_name": "西安市新希望医疗器械有限公司(1)"}
)

